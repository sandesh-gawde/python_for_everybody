#Classes for grouping together data, variables and functions
#Data(variables+functions) - Attributes(fields+methods)

Class creates the data type(template) and object/instance is the use of that data type
eg. int a # int is class and a is instance

###########
#eg.1
Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> class First:
...     pass
...
>>> one = First()
>>> two = First()
>>> one.value("1")                                    -> Can't add value, since value not defined in class
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'First' object has no attribute 'value'
>>> one.value = 1                                     -> But value can be initated as a new attribute, just as .py program can have variable on fly
>>> two.value = 2
>>>
>>> print (one)                                       -> Instance prints instance address in memory
<__main__.First object at 0x000001752AE11AF0>
>>> print (one.value)                                 -> Instance.attribute prints the value itslef.
1
#############

Init method is where the Class begins to run the program.
The parameters of the __init__ method need to be provided during initaition of the instance object.
1st Parameter for the __init__ is self by default

##############
>>> class First:
...     def __init__(self, name):                      -> Init takes instance name and variable string 'name'
...             self.name = name                       -> name is instance.name
...             print (self.name)
...
>>> one = First()                                      -> Needs the initial parameter value for 'name', just like func call
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: __init__() missing 1 required positional argument: 'name'
>>> one = First("numbers")
numbers
>>> First.__init__(one,"numbers")                      -> In backend, its called in this syntax, self=instance name
numbers
>>>
################

Class variables vs Instance variable
All variables either belong to class itself or instance
Class variables are referred as class_name.variable and instance variables are referred as self.variable
Class variable is avaialbe to all methods, if it changed by one instance it is changed for all.
If x is class variable, and instance uses it as self.x, it just borrows it from class.
If x in present in class and instance, then x in method changes self.x since that is more specific.

Class variables can be accessed in different ways:
• self.all_allocated_ip
• Network.all_allocated_ip
• type(self).all_allocated_ip
The self.all_allocated_ip option allows you to access the value of class variable or add an
element if the class variable is a mutable data type. The disadvantage of this option is that if in
the method you write self.all_allocated_ip = ..., instead of changing the class variable, an
instance variable will be created.
The option Network.all_allocated_ip will work correctly, but a small drawback this option is that
the class name is written manually. You can use the third option type(self).all_allocated_ip
instead, since type(self) returns a class.

Eg:
class Robot:
    count = 0 
    
    def __init__(self,name):
        self.name == name
        print ("Hi %s"%self.name)
        Robot.count += 1
        #Can also be called as: class.__self__.count += 1

    @classmethod
    def how_many(cls):
        print ("The count is: %", %cls.count)

    #OR can be used as instance method

    def how_many(self):
        print ("The count is: %", %Robot.count)

r1 = Robot("Robo1")
Robot.how_many()    #As cls mthd
r1.how_many()       #As obj mthd

#==========Class Method and Decorators============#
The how_many is actually a method that belongs to the class and not to the object. This means we can define it as either a classmethod or a staticmethod depending on whether we need to know which class we are part of. Since we refer to a class variable, let's use classmethod.

We have marked the how_many method as a class method using a decorator.

Decorators can be imagined to be a shortcut to calling a wrapper function (i.e. a function that "wraps" around another function so that it can do something before or after the inner function), so applying the @classmethod decorator is the same as calling:

how_many = classmethod(how_many)

#=======Underscore for names in class========#
All class members are public. One exception: If you use data members with names using the double underscore prefix such as __privatevar, Python uses name-mangling to effectively make it a private variable.

#========= To view variables for class or instance ===========#
We can print the elements key,value for instnace and class.
print (inst_name.__dict__)
print (class_name.__dict__)

#======= Inheretence ========#
1. Parent(Super or Base) class and Child(sub) class.

Child class inherets the features of the Parent class. All the methods of Parent class will be available to child class including __init__
class Parent:
    __init__(p)
    feature_p1
    method_p1
    ...
class Child(Parent):
    __init__(c)
    feature_c1
    method_c1

p_obj = Parent()        #Access to init(p), feature_p1, method_p1
c_obj = Child()         #Access to init(c), init(p), feature_c1, feature_p1, method_c1, method_p1

2. If Child class doesn't have __init__ it uses the Parent's init
class Parent:
    init(p)
    feature_p1
    method_p1

class Child(Parent):
    feature_c1
    method_c1

c_obj = Child()         #Uses the init of Parent

#========== Examples and explanation ==========#

class School_Member:
    
    def __init__(self, name, id):
        self.name = name
        self.id = id

    def announce(self):
        print ("Name and ID are: ", self.name, self.id)

class School_Teacher(School_Member):

    def __init__(self, name, id, dept):
        School_Member.__init__(self,name,id)
        #Can also be called as super().__init__(self,name,id)
        self.dept = dept

    def annouce(self):
        School_Member.announce(self)
        print ("The dept is: ", self.dept)

class School_Student(School_Student):
    
    def __init__(self, name, id, div):
        School_Member.__init__(slef, name, id)
        self.div = div

    def announce(self):
        School_Member.announce(self)
        print ("Division is: ", self.div)

Yogini = School_Teacher("Yog",3122,"Chem")
Ram = School_Student("Ram", 10221, "A")

Yogini.announce()

"""
In this case, on calling the subclass, the init from subclass will be used, so we are explicity calling the init of the Super class to initiate.
If the base class didn't have an init, then the init from the Superclass one level UP would be used.

If the announce function was not defined in the base class, the one from one level up superclass would be used.
"""

* To find if the Object is an instance of a Class:
isinstance(instance_name, Class_name)

isinstance(Yogini,School_Teacher)
>>> True

* To find if a class is a subclass of the base class:
issubclass(child,parent)

issubclass(School_Teacher, School_Member)
>>> True

issubclass(School_Member,School_Teacher)
>>> False

* Classes Multi-Inheritence:
-> https://www.programiz.com/python-programming/multiple-inheritance
====
class A:
    pass

class B:
    pass

class P(A,B):
    pass

Here, the attributes for class A and B will be available to class P.
(Method Order Resolution MRO) Order of preference will be from class P -> class A -> class B (Left to right). Object is the base class of all.

To view MRO:
Use <class_name>.mro() or use <class_name>.__mro__

>>> MultiDerived.mro()
[<class '__main__.MultiDerived'>,
 <class '__main__.Base1'>,
 <class '__main__.Base2'>,
 <class 'object'>]

* Multi level Inhertence:
----
class A:
    pass

class B(A):
    pass

class P(B):
    pass

Here, the attributes of both A and B will be available to P.





